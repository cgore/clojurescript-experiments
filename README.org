These are my experiments while learning the [[https://github.com/clojure/clojurescript][ClojureScript]] programming language.

- This uses Leiningen from http://leiningen.org/
- This uses cljs-kickoff from https://github.com/konrad-garus/cljs-kickoff

Useful links:

- An online ClojureScript REPL: [[http://clojurescript.net/]]
- A Clojure cheat sheet (mostly still applies): [[http://clojure.org/cheatsheet]]

* 01-hello-alert

This demonstrates how to stand up an empty new ClojureScript project.

You can make the first project by:

#+BEGIN_SRC sh
lein new cljs-kickoff hello-alert
mv hello-alert 01-hello-alert
#+END_SRC

You can't create the project directly with the directory name 01, because that
isn't a legitimate variable name in ClojureScript, but you can rename the
directory after the fact and it will work.

Running a server:

#+BEGIN_SRC sh
cd 01-hello-alert
lein ring server
#+END_SRC

The first time through it will take a while to compile cljs.js, but it should
be under a minute overall, and then a server will be started.  The basic bare
ClojureScript app is a hello popup, which you can access via http://localhost:3001

* 02-digital-clock

This is a digital clock, showing the current time.

This demonstrates interacting with the DOM, events, and calling JavaScript functions.

The files you are interested in are:

- src/clj/digital_clock/server.js
- src/cljs/digital_clock/client.cljs

* 03-analog-clock

This draws an analog clock.

This demonstrates a lot of basic programming logic constructs in ClojureScript,
and also demonstrates a lot of the basics of using HTML5 canvas objects too. 

* 04

* 05-om-tutorial

This is a simple build of an Om Figwheel template project.
The Om basic tutorial is at: https://github.com/omcljs/om/wiki/Basic-Tutorial
After running:

#+BEGIN_SRC sh
cd 05-om-tutorial
lein figwheel
#+END_SRC

You will eventually be able to see your app on: http://localhost:3449/
